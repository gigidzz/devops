
services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: devops-backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
    env_file:
      - ./backend/.env
    networks:
      - devops-network
    volumes:
      - backend-logs:/app/logs
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.devops.service=backend"
      - "com.devops.description=Backend API service"

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: devops-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:3001
    networks:
      - devops-network
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - frontend-logs:/var/log/nginx
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.devops.service=frontend"
      - "com.devops.description=Frontend React application"
  
  prometheus:
    image: prom/prometheus:latest
    container_name: devops-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - devops-network
    labels:
      - "com.devops.service=prometheus"
      - "com.devops.description=Prometheus metrics collector"

  grafana:
    image: grafana/grafana:latest
    container_name: devops-grafana
    restart: unless-stopped
    ports:
      - "3002:3000"  # Note: This conflicts with your frontend port
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - devops-network
    depends_on:
      - prometheus
    labels:
      - "com.devops.service=grafana"
      - "com.devops.description=Grafana monitoring dashboard"

  node-exporter:
    image: prom/node-exporter:latest
    container_name: devops-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - devops-network
    labels:
      - "com.devops.service=node-exporter"
      - "com.devops.description=System metrics exporter"

networks:
  devops-network:
    driver: bridge
    name: devops-network

volumes:
  backend-logs:
    name: devops-backend-logs
  frontend-logs:
    name: devops-frontend-logs
  prometheus-data:
    name: devops-prometheus-data
  grafana-data:
    name: devops-grafana-data
